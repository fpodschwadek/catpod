import { _ as _export_sfc, r as resolveComponent, e as createElementBlock, f as createStaticVNode, g as createBaseVNode, h as createTextVNode, i as createVNode, j as withCtx, o as openBlock } from "./app-BEZjXdGt.js";
const _sfc_main = {};
function _sfc_render(_ctx, _cache) {
  const _component_RouteLink = resolveComponent("RouteLink");
  return openBlock(), createElementBlock("div", null, [
    _cache[3] || (_cache[3] = createStaticVNode('<h1 id="how-to-use" tabindex="-1"><a class="header-anchor" href="#how-to-use"><span>How to Use</span></a></h1><h2 id="getting-started" tabindex="-1"><a class="header-anchor" href="#getting-started"><span>Getting Started</span></a></h2><p>Using a CATPOD container to orchestrate other Docker containers on the same host is fairly straightforward. You only need a suitable <a href="https://docs.ansible.com/ansible/latest/playbook_guide/index.html" target="_blank" rel="noopener noreferrer">Ansible playbook</a>. For a first example, create a file named <code>test.yml</code> with the following content (or use the <a href="https://raw.githubusercontent.com/fpodschwadek/catpod/refs/heads/main/test.yml" target="_blank" rel="noopener noreferrer">file from the GitHub repository</a>):</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code class="language-yaml"><span class="line"><span class="token punctuation">---</span></span>\n<span class="line">  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Test Playbook</span>\n<span class="line">    <span class="token key atrule">hosts</span><span class="token punctuation">:</span> localhost</span>\n<span class="line">    <span class="token key atrule">connection</span><span class="token punctuation">:</span> local</span>\n<span class="line">    <span class="token key atrule">tasks</span><span class="token punctuation">:</span></span>\n<span class="line"></span>\n<span class="line">      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Start a Docker service</span>\n<span class="line">        <span class="token key atrule">community.docker.docker_container</span><span class="token punctuation">:</span></span>\n<span class="line">          <span class="token key atrule">name</span><span class="token punctuation">:</span> hello<span class="token punctuation">-</span>world</span>\n<span class="line">          <span class="token key atrule">image</span><span class="token punctuation">:</span> hello<span class="token punctuation">-</span>world</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>From within CATPOD, you can use the Ansible <code>docker</code> Community collection to handle Docker containers on the host, as you can see in the example task here.</p><p>With this example playbook, we can run a CATPOD container to start a <a href="https://hub.docker.com/_/hello-world" target="_blank" rel="noopener noreferrer">Docker <em>Hello World</em></a> container with the following command:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token punctuation">\\</span></span>\n<span class="line">  <span class="token parameter variable">-v</span> /var/run/docker.sock:/var/run/docker.sock <span class="token punctuation">\\</span></span>\n<span class="line">  <span class="token parameter variable">-v</span> ./test.yml:/tmp/test.yml <span class="token punctuation">\\</span></span>\n<span class="line">  --group-add <span class="token variable"><span class="token variable">$(</span><span class="token function">stat</span> <span class="token parameter variable">-c</span> <span class="token string">&#39;%g&#39;</span> /var/run/docker.sock<span class="token variable">)</span></span> <span class="token punctuation">\\</span></span>\n<span class="line">  <span class="token parameter variable">--rm</span> fpod/catpod <span class="token punctuation">\\</span></span>\n<span class="line">    /tmp/test.yml</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We need to mount two volumes into the CATPOD container:</p><p><strong>First mount:</strong> <code>-v /var/run/docker.sock:/var/run/docker.sock</code></p><p><code>/var/run/docker.sock</code> is the path to the Docker socket. By mounting the host socket path to the socket path inside the container, Docker commands inside the container will be relayed to the socket on the host, allowing the CATPOD container to interact with other containers on the host (an idea that is described in <a href="https://jpetazzo.github.io/2015/09/03/do-not-use-docker-in-docker-for-ci/#the-socket-solution" target="_blank" rel="noopener noreferrer">this blog post by Jérôme Petazzoni</a> and used widely nowadays for pseudo-Docker-in-Docker settings).</p><p><strong>Second mount:</strong> <code>-v ./test.yml:/tmp/test.yml</code></p><p>This is your example playbook that needs to be mounted into the container for the Ansible instance inside the container to use. Note that it does not matter where exactly in the container the file is mounted, as you specify the full file path in the container command anyway. However, <code>tmp</code> is a safe location without any risks of name collisions or overwriting existing files.</p><p><strong>Enabling Docker socket access:</strong> <code> --group-add $(stat -c &#39;%g&#39; /var/run/docker.sock)</code></p><p>The default user inside the CATPOD container is not <code>root</code> but a user named <code>catpod</code> with the UID and GID <code>10900</code>. This user does not automatically have permissions to access the mounted Docker socket. The the <code>group-add</code> option, you add the <code>catpod</code> user to the group with the required permissions to do so.</p><p>It is recommended to use the <code>--rm</code> option to remove the CATPOD container after it has run the playbook, otherwise you&#39;ll end up with an idle container hanging around.</p><p><strong>Container command:</strong> <code>/tmp/test.yml</code></p><p>To run a playbook, the container command is the path to the mounted playbook file inside the container, in this case <code>/tmp/test.yml</code>. If you use a different mount path, e.g., <code>-v ./test.yml:/var/test.yml</code>, your container command would refer to that path, <code>/var/test.yml</code>.</p><p>Passing the playbook path as command prompts the container to internally use the <code>ansible-playbook</code> binary to run the playbook. CATPOD provides other options, described later in this chapter.</p>', 18)),
    createBaseVNode("p", null, [
      _cache[1] || (_cache[1] = createTextVNode("This is, of course, a toy example of how to use CATPOD; you don't really need a utility container to start another simple container. Have a look at the ", -1)),
      createVNode(_component_RouteLink, { to: "/use-cases.html" }, {
        default: withCtx(() => [..._cache[0] || (_cache[0] = [
          createTextVNode("Use Cases chapter", -1)
        ])]),
        _: 1
      }),
      _cache[2] || (_cache[2] = createTextVNode(" for more complex examples.", -1))
    ]),
    _cache[4] || (_cache[4] = createStaticVNode('<h2 id="container-commands-overview" tabindex="-1"><a class="header-anchor" href="#container-commands-overview"><span>Container Commands Overview</span></a></h2><h3 id="playbook-path" tabindex="-1"><a class="header-anchor" href="#playbook-path"><span><code>{ playbook path }</code></span></a></h3><p>As noted, providing the path to a playbook as a container command will prompt <code>ansible-playbook</code> to run the playbook. You can find more details here: <a href="https://docs.ansible.com/ansible/latest/cli/ansible-playbook.html" target="_blank" rel="noopener noreferrer">https://docs.ansible.com/ansible/latest/cli/ansible-playbook.html</a></p><p>This is used just like in the example above:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token punctuation">\\</span></span>\n<span class="line">  <span class="token parameter variable">-v</span> /var/run/docker.sock:/var/run/docker.sock <span class="token punctuation">\\</span></span>\n<span class="line">  <span class="token parameter variable">-v</span> ./test.yml:/tmp/test.yml <span class="token punctuation">\\</span></span>\n<span class="line">  --group-add <span class="token variable"><span class="token variable">$(</span><span class="token function">stat</span> <span class="token parameter variable">-c</span> <span class="token string">&#39;%g&#39;</span> /var/run/docker.sock<span class="token variable">)</span></span> <span class="token punctuation">\\</span></span>\n<span class="line">  <span class="token parameter variable">--rm</span> fpod/catpod <span class="token punctuation">\\</span></span>\n<span class="line">    /tmp/test.yml</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Beyond this, CATPOD provides (as of now) access to <code>ansible-galaxy</code> and <code>ansible-vault</code>.</p><h3 id="galaxy" tabindex="-1"><a class="header-anchor" href="#galaxy"><span><code>galaxy</code></span></a></h3><p>The <code>galaxy</code> command allows you to download and install collections (and to build and publish your own). You can find more details here: <a href="https://docs.ansible.com/ansible/latest/cli/ansible-galaxy.html" target="_blank" rel="noopener noreferrer">https://docs.ansible.com/ansible/latest/cli/ansible-galaxy.html</a></p><p>You can run this container command like <code>ansible-galaxy</code> itself, e.g., for downloading a collection:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token punctuation">\\</span></span>\n<span class="line">  <span class="token parameter variable">-v</span> ./local_collections:/tmp/local_collections <span class="token punctuation">\\</span></span>\n<span class="line">   --group-add <span class="token variable"><span class="token variable">$(</span><span class="token function">stat</span> <span class="token parameter variable">-c</span> <span class="token string">&#39;%g&#39;</span> /var/run/docker.sock<span class="token variable">)</span></span> <span class="token punctuation">\\</span></span>\n<span class="line">   <span class="token parameter variable">--rm</span> fpod/catpod <span class="token punctuation">\\</span></span>\n<span class="line">    galaxy collection download my_namespace.my_collection <span class="token punctuation">\\</span></span>\n<span class="line">    <span class="token parameter variable">-p</span> /tmp/local_collections</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note that you don&#39;t need to mount the Docker socket or any playbooks for this, but it makes sense to mount a host directory where downloaded (or installed) collections are persisted, otherwise they will be gone once the CATPOD container is removed.</p><p>In the above example, the local <code>local_collections</code> is mounted into the container at <code>/tmp/local_collections</code> and the mount is passed as download path (with the <code>-p</code> option) to <code>ansible-galaxy</code> in the container command.</p><h3 id="vault" tabindex="-1"><a class="header-anchor" href="#vault"><span><code>vault</code></span></a></h3><p>The <code>vault</code> command allows to encrypt variables and files that can be used in Ansible playbooks. You can find more details here: <a href="https://docs.ansible.com/ansible/latest/cli/ansible-vault.html" target="_blank" rel="noopener noreferrer">https://docs.ansible.com/ansible/latest/cli/ansible-vault.html</a></p><p>You can run this container command like <code>ansible-vault</code> itself, e.g, for encrypting a string containing an access token:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token punctuation">\\</span></span>\n<span class="line">  --group-add <span class="token variable"><span class="token variable">$(</span><span class="token function">stat</span> <span class="token parameter variable">-c</span> <span class="token string">&#39;%g&#39;</span> /var/run/docker.sock<span class="token variable">)</span></span> <span class="token punctuation">\\</span></span>\n<span class="line">  <span class="token parameter variable">--rm</span> fpod/catpod vault <span class="token punctuation">\\</span></span>\n<span class="line">    encrypt_string <span class="token string">&#39;secret-access-token&#39;</span> <span class="token parameter variable">--name</span> <span class="token string">&#39;encrypted_token&#39;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You are then prompted to enter a vault password (this password will later need to be known to your playbook in order to decrypt the token value).</p><p>Once you entered and confirmed a password, you get the entry for the encrypted value that you can use in your playbooks; here&#39;s an example using the password <code>foo</code>:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">Encryption successful</span>\n<span class="line">encrypted_token: <span class="token operator">!</span>vault <span class="token operator">|</span></span>\n<span class="line">          <span class="token variable">$ANSIBLE_VAULT</span><span class="token punctuation">;</span><span class="token number">1.1</span><span class="token punctuation">;</span>AES256</span>\n<span class="line">          <span class="token number">37363638653461663238643433646166336563653439656666303464353331393932653332643033</span></span>\n<span class="line">          3064313364383764636238383139663430646563663864620a396565366633613833653035613762</span>\n<span class="line">          <span class="token number">31626265326363343339386162373363623232666333346636396430636337646539376362663739</span></span>\n<span class="line">          6232353164336239630a383436643661396231346231663533366431633839633737363261373362</span>\n<span class="line">          <span class="token number">33376336653061633766393461313233383139356561353037346439346266323630</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>', 19))
  ]);
}
const howToUse_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "how-to-use.html.vue"]]);
const data = JSON.parse('{"path":"/how-to-use.html","title":"How to Use","lang":"en-GB","frontmatter":{"title":"How to Use"},"git":{"updatedTime":1745732948000,"contributors":[{"name":"Frodo Podschwadek","username":"","email":"frodo.podschwadek@gmail.com","commits":4}],"changelog":[{"hash":"3e53008e7dcb68f7502b45a42bc73e5456896012","time":1745732948000,"email":"frodo.podschwadek@gmail.com","author":"Frodo Podschwadek","message":"Docs correction."},{"hash":"81a07c4b50723273985bfe1d2d5a8f1efe2a4e10","time":1745732640000,"email":"frodo.podschwadek@gmail.com","author":"Frodo Podschwadek","message":"Re-format example commands."},{"hash":"f07fdbc559c05bda78d4d4a3e694e5409c9b9bbf","time":1745732444000,"email":"frodo.podschwadek@gmail.com","author":"Frodo Podschwadek","message":"Update docs to reflect requirements of group assignments to access the Docker socket."},{"hash":"e88184be2d7bd7ec9f5948f0a5fe4cc3eea59bc6","time":1745661408000,"email":"frodo.podschwadek@gmail.com","author":"Frodo Podschwadek","message":"Update docs."}]},"filePathRelative":"how-to-use.md"}');
export {
  howToUse_html as comp,
  data
};
